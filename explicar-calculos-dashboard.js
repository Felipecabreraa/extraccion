const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function explicarCalculosDashboard() {
  console.log('üßÆ EXPLICACI√ìN DE C√ÅLCULOS DEL DASHBOARD');
  console.log('==========================================\n');

  try {
    // Obtener datos del backend para 2025
    console.log('üì° Obteniendo datos del backend para 2025...');
    
    const [dashboardResponse, petroleoResponse, chartsResponse] = await Promise.all([
      axios.get(`${BASE_URL}/dashboard/unified/test-metrics?year=2025`),
      axios.get(`${BASE_URL}/dashboard/petroleo/test-metrics?year=2025`),
      axios.get(`${BASE_URL}/dashboard/unified/test-charts?year=2025`)
    ]);

    const dashboardData = dashboardResponse.data;
    const petroleoData = petroleoResponse.data;
    const chartsData = chartsResponse.data;

    console.log('‚úÖ Datos obtenidos exitosamente\n');

    // 1. EXPLICAR C√ÅLCULOS DE SUPERFICIE
    console.log('üèóÔ∏è C√ÅLCULOS DE SUPERFICIE');
    console.log('==========================');
    
    console.log(`üìä Total Mts¬≤ desde backend: ${dashboardData.totalMts2?.toLocaleString() || 'N/A'}`);
    console.log(`üìä Total Planillas desde backend: ${dashboardData.totalPlanillas?.toLocaleString() || 'N/A'}`);
    
    if (dashboardData.totalMts2 && dashboardData.totalPlanillas) {
      const promedioMts2PorPlanilla = Math.round(dashboardData.totalMts2 / dashboardData.totalPlanillas);
      console.log(`üìè C√°lculo promedio m¬≤/planilla: ${dashboardData.totalMts2.toLocaleString()} √∑ ${dashboardData.totalPlanillas.toLocaleString()} = ${promedioMts2PorPlanilla.toLocaleString()} m¬≤/planilla`);
      
      const eficienciaPorSector = Math.round(dashboardData.totalMts2 / dashboardData.totalPlanillas / 8);
      console.log(`‚ö° C√°lculo eficiencia por sector: ${dashboardData.totalMts2.toLocaleString()} √∑ ${dashboardData.totalPlanillas.toLocaleString()} √∑ 8 horas = ${eficienciaPorSector.toLocaleString()} m¬≤/hora`);
    }
    console.log('');

    // 2. EXPLICAR C√ÅLCULOS DE COMBUSTIBLE
    console.log('‚õΩ C√ÅLCULOS DE COMBUSTIBLE');
    console.log('==========================');
    
    if (petroleoData.kpis) {
      console.log(`üõ¢Ô∏è Total litros desde backend: ${petroleoData.kpis.totalLitrosConsumidos?.toLocaleString() || 'N/A'} L`);
      console.log(`üìä Total pabellones procesados: ${petroleoData.kpis.totalPabellonesProcesados?.toLocaleString() || 'N/A'}`);
      
      if (petroleoData.kpis.totalLitrosConsumidos && petroleoData.kpis.totalPabellonesProcesados) {
        const promedioLitroPorPabellon = Math.round(petroleoData.kpis.totalLitrosConsumidos / petroleoData.kpis.totalPabellonesProcesados);
        console.log(`üìà C√°lculo promedio L/pabell√≥n: ${petroleoData.kpis.totalLitrosConsumidos.toLocaleString()} √∑ ${petroleoData.kpis.totalPabellonesProcesados.toLocaleString()} = ${promedioLitroPorPabellon} L/pabell√≥n`);
      }
      
      console.log(`üìä Eficiencia combustible: ${petroleoData.kpis.promedioLitrosPorRegistro || 'N/A'} L/registro`);
    }
    console.log('');

    // 3. EXPLICAR C√ÅLCULOS DE DA√ëOS
    console.log('‚ö†Ô∏è C√ÅLCULOS DE DA√ëOS');
    console.log('=====================');
    
    console.log(`üö® Da√±os del mes desde backend: ${dashboardData.danosMes || 'N/A'}`);
    console.log(`üìä Total planillas desde backend: ${dashboardData.totalPlanillas?.toLocaleString() || 'N/A'}`);
    
    if (dashboardData.danosMes && dashboardData.totalPlanillas) {
      const porcentajePlanillasConDanos = Math.round((dashboardData.danosMes / dashboardData.totalPlanillas) * 100);
      console.log(`üìä C√°lculo % planillas con da√±os: (${dashboardData.danosMes} √∑ ${dashboardData.totalPlanillas.toLocaleString()}) √ó 100 = ${porcentajePlanillasConDanos}%`);
    }
    console.log('');

    // 4. EXPLICAR DATOS DE GR√ÅFICOS
    console.log('üìà DATOS DE GR√ÅFICOS');
    console.log('====================');
    
    if (chartsData.tendenciasMensuales) {
      console.log(`üìä Tendencias mensuales disponibles: ${chartsData.tendenciasMensuales.length} meses`);
      chartsData.tendenciasMensuales.forEach((mes, index) => {
        console.log(`   ${index + 1}. ${mes.mes}: ${mes.planillas} planillas, ${mes.pabellones} pabellones`);
      });
    } else {
      console.log('‚ùå No hay datos de tendencias mensuales');
    }
    
    if (chartsData.rendimientoPorSector) {
      console.log(`üìä Sectores con rendimiento: ${chartsData.rendimientoPorSector.length} sectores`);
      chartsData.rendimientoPorSector.slice(0, 3).forEach((sector, index) => {
        console.log(`   ${index + 1}. ${sector.sector}: ${sector.planillas} planillas, ${sector.pabellones} pabellones`);
      });
    } else {
      console.log('‚ùå No hay datos de rendimiento por sector');
    }
    console.log('');

    // 5. EXPLICAR VARIACIONES
    console.log('üìà C√ÅLCULOS DE VARIACIONES');
    console.log('==========================');
    
    console.log(`üìä Variaci√≥n planillas: ${dashboardData.variacionPlanillas || 'N/A'}%`);
    console.log(`üìä Variaci√≥n pabellones: ${dashboardData.variacionPabellones || 'N/A'}%`);
    console.log(`üìä Variaci√≥n mts¬≤: ${dashboardData.variacionMts2 || 'N/A'}%`);
    console.log('');

    // 6. RESUMEN DE F√ìRMULAS
    console.log('üßÆ F√ìRMULAS UTILIZADAS');
    console.log('======================');
    
    console.log('üìè Superficie:');
    console.log('   ‚Ä¢ Promedio m¬≤/planilla = Total m¬≤ √∑ Total planillas');
    console.log('   ‚Ä¢ Eficiencia por sector = Total m¬≤ √∑ Total planillas √∑ 8 horas');
    console.log('');
    
    console.log('‚õΩ Combustible:');
    console.log('   ‚Ä¢ Promedio L/pabell√≥n = Total litros √∑ Total pabellones procesados');
    console.log('   ‚Ä¢ Eficiencia = Promedio litros por registro (desde backend)');
    console.log('');
    
    console.log('‚ö†Ô∏è Da√±os:');
    console.log('   ‚Ä¢ % Planillas con da√±os = (Da√±os del mes √∑ Total planillas) √ó 100');
    console.log('');
    
    console.log('üìà Variaciones:');
    console.log('   ‚Ä¢ Calculadas autom√°ticamente por el backend');
    console.log('   ‚Ä¢ Comparaci√≥n mes actual vs mes anterior');
    console.log('');

    // 7. VERIFICAR PROBLEMAS POTENCIALES
    console.log('üîç VERIFICACI√ìN DE PROBLEMAS');
    console.log('============================');
    
    const problemas = [];
    
    if (!chartsData.tendenciasMensuales || chartsData.tendenciasMensuales.length === 0) {
      problemas.push('‚ùå No hay datos de tendencias mensuales');
    }
    
    if (!chartsData.rendimientoPorSector || chartsData.rendimientoPorSector.length === 0) {
      problemas.push('‚ùå No hay datos de rendimiento por sector');
    }
    
    if (dashboardData.totalPlanillas === 0) {
      problemas.push('‚ùå Total planillas es 0');
    }
    
    if (dashboardData.totalMts2 === 0) {
      problemas.push('‚ùå Total mts¬≤ es 0');
    }
    
    if (problemas.length === 0) {
      console.log('‚úÖ No se detectaron problemas en los datos');
    } else {
      console.log('‚ö†Ô∏è Problemas detectados:');
      problemas.forEach(problema => console.log(`   ${problema}`));
    }

  } catch (error) {
    console.error('‚ùå Error explicando c√°lculos:', error.message);
    
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Data: ${JSON.stringify(error.response.data)}`);
    }
  }
}

// Ejecutar explicaci√≥n
explicarCalculosDashboard();
