const axios = require('axios');

// Configuraci√≥n de la API
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3001/api';

async function probarAjusteDinamico() {
  try {
    console.log('üß™ Probando ajuste din√°mico de da√±os acumulados...\n');
    
    // Obtener fecha actual
    const fechaActual = new Date();
    const mesActual = fechaActual.getMonth() + 1;
    const anioActual = fechaActual.getFullYear();
    
    console.log(`üìÖ Fecha actual: ${fechaActual.toLocaleDateString('es-CL')}`);
    console.log(`üìÖ Mes actual: ${mesActual} (${getMonthName(mesActual)})`);
    console.log(`üìÖ A√±o actual: ${anioActual}\n`);
    
    // Probar diferentes a√±os
    const a√±osParaProbar = [anioActual - 1, anioActual, anioActual + 1];
    
    for (const a√±o of a√±osParaProbar) {
      console.log(`üîç Probando a√±o: ${a√±o}`);
      
      try {
        const response = await axios.get(`${API_BASE_URL}/danos-acumulados?anio=${a√±o}`);
        const datos = response.data;
        
        console.log(`‚úÖ Datos obtenidos para ${a√±o}`);
        console.log(`üìä Ajuste din√°mico:`, datos.ajuste_dinamico);
        
        // Verificar que la l√≠nea real se ajusta correctamente
        const datosGrafico = datos.datos_grafico || [];
        const mesesConDatosReales = datosGrafico.filter(mes => mes.real_acumulado > 0).length;
        const mesLimiteReal = datos.ajuste_dinamico?.mes_limite_real || 0;
        
        console.log(`üìà Meses con datos reales: ${mesesConDatosReales}`);
        console.log(`üéØ Mes l√≠mite real: ${mesLimiteReal} (${getMonthName(mesLimiteReal)})`);
        
        // Verificar que los datos se ajustan correctamente
        let datosCorrectos = true;
        for (let i = 0; i < datosGrafico.length; i++) {
          const mes = datosGrafico[i];
          const numeroMes = i + 1;
          
          if (numeroMes > mesLimiteReal && datos.ajuste_dinamico?.es_anio_actual) {
            // Para meses futuros en a√±o actual, deber√≠a mantener el √∫ltimo valor
            const ultimoMesConDatos = Math.max(0, mesLimiteReal);
            if (ultimoMesConDatos > 0) {
              const valorEsperado = datosGrafico[ultimoMesConDatos - 1].real_acumulado;
              if (mes.real_acumulado !== valorEsperado) {
                console.log(`‚ùå Error en mes ${numeroMes}: esperado ${valorEsperado}, obtenido ${mes.real_acumulado}`);
                datosCorrectos = false;
              }
            }
          }
        }
        
        if (datosCorrectos) {
          console.log(`‚úÖ Ajuste din√°mico correcto para ${a√±o}`);
        } else {
          console.log(`‚ùå Problemas en el ajuste din√°mico para ${a√±o}`);
        }
        
        console.log(`üí∞ Total real: ${datos.kpis?.total_real_actual_formateado || '$0'}`);
        console.log(`üí∞ Total presupuesto: ${datos.kpis?.total_ppto_actual_formateado || '$0'}`);
        console.log('---\n');
        
      } catch (error) {
        console.log(`‚ùå Error obteniendo datos para ${a√±o}:`, error.message);
        console.log('---\n');
      }
    }
    
    console.log('üéâ Prueba de ajuste din√°mico completada');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

function getMonthName(month) {
  const meses = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];
  return meses[month - 1] || 'Desconocido';
}

// Ejecutar la prueba
if (require.main === module) {
  probarAjusteDinamico();
}

module.exports = { probarAjusteDinamico };




