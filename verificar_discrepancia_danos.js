const sequelize = require('./src/config/database');

async function verificarDiscrepanciaDanos() {
  try {
    console.log('üîç Verificando discrepancia en da√±os: 608 vs 584\n');

    // 1. Verificar total de da√±os en la tabla original
    console.log('1. Verificando da√±os en tabla original migracion_ordenes_2025:');
    const [danosOriginales] = await sequelize.query(`
      SELECT 
        COUNT(*) as total_registros,
        COALESCE(SUM(cantidad_dano), 0) as total_danos,
        COUNT(DISTINCT id_orden_servicio) as ordenes_con_danos
      FROM migracion_ordenes_2025
      WHERE cantidad_dano > 0
    `);
    
    const originales = danosOriginales[0];
    console.log(`   üìä Total registros con da√±os: ${originales.total_registros}`);
    console.log(`   üìä Total da√±os sumados: ${originales.total_danos}`);
    console.log(`   üìä √ìrdenes con da√±os: ${originales.ordenes_con_danos}`);

    // 2. Verificar da√±os en la vista unificada
    console.log('\n2. Verificando da√±os en vista unificada vw_ordenes_2025_actual:');
    const [danosVista] = await sequelize.query(`
      SELECT 
        COUNT(*) as total_registros,
        COALESCE(SUM(cantidadDano), 0) as total_danos,
        COUNT(DISTINCT idOrdenServicio) as ordenes_con_danos
      FROM vw_ordenes_2025_actual
      WHERE cantidadDano > 0
    `);
    
    const vista = danosVista[0];
    console.log(`   üìä Total registros con da√±os: ${vista.total_registros}`);
    console.log(`   üìä Total da√±os sumados: ${vista.total_danos}`);
    console.log(`   üìä √ìrdenes con da√±os: ${vista.ordenes_con_danos}`);

    // 3. Calcular diferencia
    const diferencia = originales.total_danos - vista.total_danos;
    console.log(`\n3. Diferencia encontrada: ${originales.total_danos} - ${vista.total_danos} = ${diferencia} da√±os`);

    // 4. Verificar registros que podr√≠an estar faltando
    console.log('\n4. Verificando registros faltantes en la vista:');
    const [registrosFaltantes] = await sequelize.query(`
      SELECT 
        m.id_orden_servicio,
        m.fecha_inicio,
        m.sector,
        m.cantidad_dano,
        m.tipo_dano,
        m.operador
      FROM migracion_ordenes_2025 m
      LEFT JOIN vw_ordenes_2025_actual v ON m.id_orden_servicio = v.idOrdenServicio
      WHERE m.cantidad_dano > 0 AND v.idOrdenServicio IS NULL
      ORDER BY m.cantidad_dano DESC
      LIMIT 10
    `);
    
    if (registrosFaltantes.length > 0) {
      console.log(`   ‚ö†Ô∏è  Encontrados ${registrosFaltantes.length} registros con da√±os que no est√°n en la vista:`);
      registrosFaltantes.forEach((reg, index) => {
        console.log(`      ${index + 1}. Orden ${reg.id_orden_servicio} - ${reg.sector} - ${reg.cantidad_dano} da√±os (${reg.tipo_dano})`);
      });
    } else {
      console.log('   ‚úÖ No se encontraron registros faltantes');
    }

    // 5. Verificar registros duplicados o con valores diferentes
    console.log('\n5. Verificando registros con valores diferentes:');
    const [valoresDiferentes] = await sequelize.query(`
      SELECT 
        m.id_orden_servicio,
        m.cantidad_dano as danos_original,
        v.cantidadDano as danos_vista,
        m.tipo_dano as tipo_original,
        v.nombreTipoDano as tipo_vista
      FROM migracion_ordenes_2025 m
      INNER JOIN vw_ordenes_2025_actual v ON m.id_orden_servicio = v.idOrdenServicio
      WHERE m.cantidad_dano != v.cantidadDano OR m.cantidad_dano > 0 AND v.cantidadDano = 0
      ORDER BY m.cantidad_dano DESC
      LIMIT 10
    `);
    
    if (valoresDiferentes.length > 0) {
      console.log(`   ‚ö†Ô∏è  Encontrados ${valoresDiferentes.length} registros con valores diferentes:`);
      valoresDiferentes.forEach((reg, index) => {
        console.log(`      ${index + 1}. Orden ${reg.id_orden_servicio}: Original=${reg.danos_original}, Vista=${reg.danos_vista}`);
      });
    } else {
      console.log('   ‚úÖ No se encontraron valores diferentes');
    }

    // 6. Verificar estructura de la vista
    console.log('\n6. Verificando estructura de la vista:');
    const [estructuraVista] = await sequelize.query('DESCRIBE vw_ordenes_2025_actual');
    const camposDanos = estructuraVista.filter(col => col.Field.toLowerCase().includes('dano'));
    console.log(`   üìã Campos relacionados con da√±os: ${camposDanos.length}`);
    camposDanos.forEach(col => {
      console.log(`      - ${col.Field}: ${col.Type}`);
    });

    // 7. Verificar filtros en la vista
    console.log('\n7. Verificando filtros aplicados en la vista:');
    const [filtrosVista] = await sequelize.query(`
      SELECT 
        COUNT(*) as total_registros,
        COUNT(CASE WHEN fecha_inicio IS NULL THEN 1 END) as sin_fecha,
        COUNT(CASE WHEN cantidad_dano IS NULL THEN 1 END) as sin_danos,
        COUNT(CASE WHEN cantidad_dano = 0 THEN 1 END) as danos_cero
      FROM migracion_ordenes_2025
    `);
    
    const filtros = filtrosVista[0];
    console.log(`   üìä Total registros en tabla original: ${filtros.total_registros}`);
    console.log(`   üìä Registros sin fecha: ${filtros.sin_fecha}`);
    console.log(`   üìä Registros sin da√±os (NULL): ${filtros.sin_danos}`);
    console.log(`   üìä Registros con da√±os = 0: ${filtros.danos_cero}`);

    // 8. Resumen final
    console.log('\n8. Resumen de la discrepancia:');
    console.log(`   üî¢ Da√±os en tabla original: ${originales.total_danos}`);
    console.log(`   üî¢ Da√±os en vista unificada: ${vista.total_danos}`);
    console.log(`   üî¢ Diferencia: ${diferencia}`);
    console.log(`   üìä Porcentaje de p√©rdida: ${((diferencia / originales.total_danos) * 100).toFixed(2)}%`);

    if (diferencia > 0) {
      console.log('\n‚ùå PROBLEMA DETECTADO: Hay da√±os que no se est√°n incluyendo en la vista unificada');
      console.log('üí° Posibles causas:');
      console.log('   - Filtros en la vista que excluyen registros');
      console.log('   - Problemas en el mapeo de campos');
      console.log('   - Registros con valores NULL o 0');
      console.log('   - Condiciones WHERE que excluyen datos v√°lidos');
    } else {
      console.log('\n‚úÖ No se detectaron discrepancias en los da√±os');
    }

  } catch (error) {
    console.error('‚ùå Error al verificar discrepancia:', error);
  } finally {
    await sequelize.close();
  }
}

verificarDiscrepanciaDanos();





