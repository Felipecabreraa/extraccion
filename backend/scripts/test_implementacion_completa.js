const axios = require('axios');

// Configuraci√≥n base
const BASE_URL = 'http://localhost:3001/api';

async function testImplementacionCompleta() {
  console.log('üß™ Probando implementaci√≥n completa de vista unificada...\n');

  try {
    // 1. Probar Dashboard con vista unificada
    console.log('1. Probando Dashboard con vista unificada...');
    
    // Test 1: Dashboard sin filtros
    console.log('   - Dashboard sin filtros:');
    const dashboardResponse = await axios.get(`${BASE_URL}/dashboard/metrics`);
    console.log(`     ‚úÖ Total planillas: ${dashboardResponse.data.totalPlanillas}`);
    console.log(`     ‚úÖ Total pabellones: ${dashboardResponse.data.totalPabellones}`);
    console.log(`     ‚úÖ Pabellones mes: ${dashboardResponse.data.pabellonesMes}`);
    console.log(`     ‚úÖ Variaci√≥n pabellones: ${dashboardResponse.data.variacionPabellones}%`);
    
    // Test 2: Dashboard con filtro hist√≥rico 2025
    console.log('   - Dashboard con filtro hist√≥rico 2025:');
    const dashboardHistoricoResponse = await axios.get(`${BASE_URL}/dashboard/metrics?origen=historico_2025&year=2025`);
    console.log(`     ‚úÖ Total planillas: ${dashboardHistoricoResponse.data.totalPlanillas}`);
    console.log(`     ‚úÖ Fuente: ${dashboardHistoricoResponse.data.metadata.fuente}`);
    
    // Test 3: Gr√°ficos del dashboard
    console.log('   - Gr√°ficos del dashboard:');
    const chartsResponse = await axios.get(`${BASE_URL}/dashboard/charts?year=2025`);
    console.log(`     ‚úÖ Tendencias mensuales: ${chartsResponse.data.ordenesPorMes?.length || 0} per√≠odos`);
    console.log(`     ‚úÖ Top sectores: ${chartsResponse.data.topSectores?.length || 0} sectores`);
    
    // 2. Probar Da√±os con vista unificada
    console.log('\n2. Probando Da√±os con vista unificada...');
    
    // Test 1: Estad√≠sticas de da√±os sin filtros
    console.log('   - Estad√≠sticas de da√±os sin filtros:');
    const danosResponse = await axios.get(`${BASE_URL}/danos/stats?year=2025`);
    console.log(`     ‚úÖ Total √≥rdenes con da√±os: ${danosResponse.data.resumen.total_ordenes_con_danos}`);
    console.log(`     ‚úÖ Total da√±os: ${danosResponse.data.resumen.total_danos}`);
    console.log(`     ‚úÖ Tipos de da√±os: ${danosResponse.data.resumen.tipos_danos_diferentes}`);
    console.log(`     ‚úÖ Da√±os por tipo: ${danosResponse.data.danosPorTipo?.length || 0} tipos`);
    
    // Test 2: Da√±os con filtro hist√≥rico
    console.log('   - Da√±os con filtro hist√≥rico:');
    const danosHistoricoResponse = await axios.get(`${BASE_URL}/danos/stats?origen=historico_2025&year=2025`);
    console.log(`     ‚úÖ Total da√±os hist√≥ricos: ${danosHistoricoResponse.data.resumen.total_danos}`);
    console.log(`     ‚úÖ Fuente: ${danosHistoricoResponse.data.metadata.fuente}`);
    
    // Test 3: Da√±os por sector
    console.log('   - Da√±os por sector:');
    console.log(`     ‚úÖ Sectores con da√±os: ${danosResponse.data.danosPorSector?.length || 0} sectores`);
    
    // 3. Verificar estructura de datos
    console.log('\n3. Verificando estructura de datos...');
    
    // Verificar campos del dashboard
    const requiredDashboardFields = [
      'totalPlanillas', 'totalPabellones', 'pabellonesMes', 
      'variacionPabellones', 'charts', 'metadata'
    ];
    
    requiredDashboardFields.forEach(field => {
      if (dashboardResponse.data.hasOwnProperty(field)) {
        console.log(`     ‚úÖ Dashboard: ${field} presente`);
      } else {
        console.log(`     ‚ùå Dashboard: ${field} faltante`);
      }
    });
    
    // Verificar campos de da√±os
    const requiredDanosFields = [
      'resumen', 'danosPorTipo', 'danosPorSector', 
      'danosPorSupervisor', 'evolucion', 'metadata'
    ];
    
    requiredDanosFields.forEach(field => {
      if (danosResponse.data.hasOwnProperty(field)) {
        console.log(`     ‚úÖ Da√±os: ${field} presente`);
      } else {
        console.log(`     ‚ùå Da√±os: ${field} faltante`);
      }
    });
    
    // 4. Probar filtros
    console.log('\n4. Probando filtros...');
    
    // Test filtro por mes
    const dashboardMesResponse = await axios.get(`${BASE_URL}/dashboard/metrics?year=2025&month=7`);
    console.log(`     ‚úÖ Dashboard mes 7: ${dashboardMesResponse.data.pabellonesMes} pabellones`);
    
    // Test filtro da√±os por mes
    const danosMesResponse = await axios.get(`${BASE_URL}/danos/stats?year=2025&month=7`);
    console.log(`     ‚úÖ Da√±os mes 7: ${danosMesResponse.data.resumen.total_danos} da√±os`);
    
    // 5. Resumen de datos
    console.log('\n5. Resumen de datos obtenidos...');
    console.log(`   üìä Dashboard:`);
    console.log(`      - Total planillas: ${dashboardResponse.data.totalPlanillas}`);
    console.log(`      - Total pabellones: ${dashboardResponse.data.totalPabellones}`);
    console.log(`      - Pabellones mes actual: ${dashboardResponse.data.pabellonesMes}`);
    console.log(`      - Variaci√≥n: ${dashboardResponse.data.variacionPabellones}%`);
    
    console.log(`   üîß Da√±os:`);
    console.log(`      - √ìrdenes con da√±os: ${danosResponse.data.resumen.total_ordenes_con_danos}`);
    console.log(`      - Total da√±os: ${danosResponse.data.resumen.total_danos}`);
    console.log(`      - Tipos diferentes: ${danosResponse.data.resumen.tipos_danos_diferentes}`);
    console.log(`      - Sectores afectados: ${danosResponse.data.resumen.sectores_con_danos}`);
    
    console.log('\n‚úÖ Implementaci√≥n completa probada exitosamente!');
    console.log('üéØ La vista unificada est√° funcionando correctamente en Dashboard y Da√±os');
    console.log('üìä Los datos se est√°n proyectando desde vw_ordenes_2025_actual');
    
  } catch (error) {
    console.error('‚ùå Error probando implementaci√≥n:', error.message);
    
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

// Ejecutar la prueba
testImplementacionCompleta(); 