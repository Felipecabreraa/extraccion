const mysql = require('mysql2/promise');
require('dotenv').config();

async function limpiarDatosHu√©rfanosPlanillas() {
  console.log('üßπ Iniciando limpieza de datos hu√©rfanos de planillas...\n');

  let connection;
  
  try {
    // Configurar conexi√≥n a la base de datos
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'extraction_db',
      port: process.env.DB_PORT || 3306
    });

    console.log('‚úÖ Conexi√≥n a la base de datos establecida');

    // 1. Verificar datos hu√©rfanos antes de limpiar
    console.log('\n1Ô∏è‚É£ Verificando datos hu√©rfanos existentes...');
    
    const [barredoresHu√©rfanos] = await connection.execute(`
      SELECT COUNT(*) as count FROM barredor b 
      LEFT JOIN planilla p ON b.planilla_id = p.id 
      WHERE p.id IS NULL
    `);
    
    const [maquinasHu√©rfanas] = await connection.execute(`
      SELECT COUNT(*) as count FROM maquina_planilla mp 
      LEFT JOIN planilla p ON mp.planilla_id = p.id 
      WHERE p.id IS NULL
    `);
    
    const [pabellonesHu√©rfanos] = await connection.execute(`
      SELECT COUNT(*) as count FROM pabellon_maquina pm 
      LEFT JOIN planilla p ON pm.planilla_id = p.id 
      WHERE p.id IS NULL
    `);
    
    const [danosHu√©rfanos] = await connection.execute(`
      SELECT COUNT(*) as count FROM dano d 
      LEFT JOIN planilla p ON d.planilla_id = p.id 
      WHERE p.id IS NULL
    `);

    console.log(`   üìã Barredores hu√©rfanos: ${barredoresHu√©rfanos[0].count}`);
    console.log(`   üöú M√°quinas hu√©rfanas: ${maquinasHu√©rfanas[0].count}`);
    console.log(`   üè¢ Pabellones hu√©rfanos: ${pabellonesHu√©rfanos[0].count}`);
    console.log(`   ‚ö†Ô∏è Da√±os hu√©rfanos: ${danosHu√©rfanos[0].count}`);

    const totalHu√©rfanos = barredoresHu√©rfanos[0].count + maquinasHu√©rfanas[0].count + 
                          pabellonesHu√©rfanos[0].count + danosHu√©rfanos[0].count;

    if (totalHu√©rfanos === 0) {
      console.log('\n‚úÖ No se encontraron datos hu√©rfanos. No es necesario limpiar.');
      return;
    }

    // 2. Confirmar limpieza
    console.log(`\n‚ö†Ô∏è Se encontraron ${totalHu√©rfanos} registros hu√©rfanos.`);
    console.log('¬øDesea proceder con la limpieza? (s/n)');
    
    // En un entorno automatizado, proceder directamente
    // En un entorno interactivo, aqu√≠ se pedir√≠a confirmaci√≥n
    
    // 3. Iniciar transacci√≥n para limpieza
    console.log('\n2Ô∏è‚É£ Iniciando limpieza de datos hu√©rfanos...');
    
    await connection.beginTransaction();

    try {
      // Eliminar barredores hu√©rfanos
      const [resultadoBarredores] = await connection.execute(`
        DELETE b FROM barredor b 
        LEFT JOIN planilla p ON b.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      console.log(`   üìã Barredores hu√©rfanos eliminados: ${resultadoBarredores.affectedRows}`);

      // Eliminar m√°quinas hu√©rfanas
      const [resultadoMaquinas] = await connection.execute(`
        DELETE mp FROM maquina_planilla mp 
        LEFT JOIN planilla p ON mp.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      console.log(`   üöú M√°quinas hu√©rfanas eliminadas: ${resultadoMaquinas.affectedRows}`);

      // Eliminar pabellones hu√©rfanos
      const [resultadoPabellones] = await connection.execute(`
        DELETE pm FROM pabellon_maquina pm 
        LEFT JOIN planilla p ON pm.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      console.log(`   üè¢ Pabellones hu√©rfanos eliminados: ${resultadoPabellones.affectedRows}`);

      // Eliminar da√±os hu√©rfanos
      const [resultadoDanos] = await connection.execute(`
        DELETE d FROM dano d 
        LEFT JOIN planilla p ON d.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      console.log(`   ‚ö†Ô∏è Da√±os hu√©rfanos eliminados: ${resultadoDanos.affectedRows}`);

      // Confirmar transacci√≥n
      await connection.commit();
      console.log('\n‚úÖ Transacci√≥n confirmada. Limpieza completada exitosamente.');

      // 4. Verificar que no quedan datos hu√©rfanos
      console.log('\n3Ô∏è‚É£ Verificando que no quedan datos hu√©rfanos...');
      
      const [verificacionBarredores] = await connection.execute(`
        SELECT COUNT(*) as count FROM barredor b 
        LEFT JOIN planilla p ON b.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      
      const [verificacionMaquinas] = await connection.execute(`
        SELECT COUNT(*) as count FROM maquina_planilla mp 
        LEFT JOIN planilla p ON mp.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      
      const [verificacionPabellones] = await connection.execute(`
        SELECT COUNT(*) as count FROM pabellon_maquina pm 
        LEFT JOIN planilla p ON pm.planilla_id = p.id 
        WHERE p.id IS NULL
      `);
      
      const [verificacionDanos] = await connection.execute(`
        SELECT COUNT(*) as count FROM dano d 
        LEFT JOIN planilla p ON d.planilla_id = p.id 
        WHERE p.id IS NULL
      `);

      console.log(`   üìã Barredores hu√©rfanos restantes: ${verificacionBarredores[0].count}`);
      console.log(`   üöú M√°quinas hu√©rfanas restantes: ${verificacionMaquinas[0].count}`);
      console.log(`   üè¢ Pabellones hu√©rfanos restantes: ${verificacionPabellones[0].count}`);
      console.log(`   ‚ö†Ô∏è Da√±os hu√©rfanos restantes: ${verificacionDanos[0].count}`);

      const totalRestantes = verificacionBarredores[0].count + verificacionMaquinas[0].count + 
                            verificacionPabellones[0].count + verificacionDanos[0].count;

      if (totalRestantes === 0) {
        console.log('\nüéâ ¬°Limpieza completada exitosamente! No quedan datos hu√©rfanos.');
      } else {
        console.log(`\n‚ö†Ô∏è A√∫n quedan ${totalRestantes} registros hu√©rfanos.`);
      }

    } catch (error) {
      // Revertir transacci√≥n en caso de error
      await connection.rollback();
      throw error;
    }

  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error.message);
    if (connection) {
      try {
        await connection.rollback();
        console.log('üîÑ Transacci√≥n revertida debido al error.');
      } catch (rollbackError) {
        console.error('‚ùå Error al revertir transacci√≥n:', rollbackError.message);
      }
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Conexi√≥n a la base de datos cerrada.');
    }
  }
}

// Ejecutar limpieza
limpiarDatosHu√©rfanosPlanillas()
  .then(() => {
    console.log('\n‚úÖ Script de limpieza completado.');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Error en el script:', error);
    process.exit(1);
  }); 