const { crearRespaldoCompleto } = require('./crear_respaldo_completo');
const { configurarMigracionRapida } = require('./configurar_migracion_rapida');
const { verificarConexion } = require('./migracion_completa_planillas');

// Funci√≥n para obtener entrada del usuario
function obtenerEntrada(pregunta) {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question(pregunta, (respuesta) => {
      rl.close();
      resolve(respuesta);
    });
  });
}

// Funci√≥n para mostrar men√∫ de preparaci√≥n
function mostrarMenuPreparacion() {
  console.log('üöÄ PREPARACI√ìN COMPLETA PARA MIGRACI√ìN');
  console.log('=====================================');
  console.log('');
  console.log('Este script prepara todo para la migraci√≥n de planillas:');
  console.log('');
  console.log('1. Crear respaldo completo del sistema actual');
  console.log('2. Configurar conexi√≥n a base de datos TRN');
  console.log('3. Verificar conectividad');
  console.log('4. Iniciar migraci√≥n');
  console.log('5. Solo crear respaldo');
  console.log('6. Solo configurar conexi√≥n');
  console.log('7. Solo verificar conexi√≥n');
  console.log('8. Salir');
  console.log('');
}

// Funci√≥n para crear respaldo
async function ejecutarRespaldo() {
  console.log('üõ°Ô∏è  PASO 1: CREANDO RESPALDO COMPLETO');
  console.log('=====================================');
  console.log('');
  
  try {
    const resultado = await crearRespaldoCompleto();
    console.log('');
    console.log('‚úÖ Respaldo completado exitosamente');
    return resultado;
  } catch (error) {
    console.error('‚ùå Error en el respaldo:', error.message);
    const continuar = await obtenerEntrada('¬øDeseas continuar sin respaldo? (s/n): ');
    return continuar.toLowerCase() === 's' ? null : null;
  }
}

// Funci√≥n para configurar conexi√≥n
async function ejecutarConfiguracion() {
  console.log('‚ö° PASO 2: CONFIGURANDO CONEXI√ìN TRN');
  console.log('===================================');
  console.log('');
  
  try {
    await configurarMigracionRapida();
    console.log('');
    console.log('‚úÖ Configuraci√≥n completada exitosamente');
    return true;
  } catch (error) {
    console.error('‚ùå Error en la configuraci√≥n:', error.message);
    return false;
  }
}

// Funci√≥n para verificar conexi√≥n
async function ejecutarVerificacion() {
  console.log('üîç PASO 3: VERIFICANDO CONECTIVIDAD');
  console.log('===================================');
  console.log('');
  
  try {
    const resultado = await verificarConexion();
    console.log('');
    if (resultado) {
      console.log('‚úÖ Verificaci√≥n completada exitosamente');
    } else {
      console.log('‚ùå Problemas de conectividad detectados');
    }
    return resultado;
  } catch (error) {
    console.error('‚ùå Error en la verificaci√≥n:', error.message);
    return false;
  }
}

// Funci√≥n para iniciar migraci√≥n
async function iniciarMigracion() {
  console.log('üöÄ PASO 4: INICIANDO MIGRACI√ìN');
  console.log('==============================');
  console.log('');
  
  console.log('üìã Opciones de migraci√≥n:');
  console.log('1. Migraci√≥n completa (extraer + completar referencias)');
  console.log('2. Solo extraer datos del sistema externo');
  console.log('3. Solo completar referencias de archivo existente');
  console.log('4. Volver al men√∫ principal');
  console.log('');
  
  const opcion = await obtenerEntrada('Selecciona una opci√≥n (1-4): ');
  
  switch (opcion.trim()) {
    case '1':
      const anioInicio = parseInt(await obtenerEntrada('A√±o de inicio (ej: 2024): ')) || 2024;
      const anioFin = parseInt(await obtenerEntrada('A√±o de fin (ej: 2025): ')) || 2025;
      const crearSupervisores = (await obtenerEntrada('¬øCrear supervisores si no existen? (s/n): ')).toLowerCase() === 's';
      const crearSectores = (await obtenerEntrada('¬øCrear sectores si no existen? (s/n): ')).toLowerCase() === 's';
      
      console.log('');
      console.log('üöÄ Iniciando migraci√≥n completa...');
      console.log(`üìÖ Per√≠odo: ${anioInicio} - ${anioFin}`);
      console.log(`üîß Opciones: crear supervisores=${crearSupervisores}, crear sectores=${crearSectores}`);
      console.log('');
      
      // Importar y ejecutar migraci√≥n completa
      const { migracionCompleta } = require('./migracion_completa_planillas');
      await migracionCompleta(anioInicio, anioFin, {
        crearSupervisores,
        crearSectores
      });
      break;
      
    case '2':
      const anioInicio2 = parseInt(await obtenerEntrada('A√±o de inicio (ej: 2024): ')) || 2024;
      const anioFin2 = parseInt(await obtenerEntrada('A√±o de fin (ej: 2025): ')) || 2025;
      
      console.log('');
      console.log('üìä Iniciando extracci√≥n de datos...');
      
      const { soloExtraerDatos } = require('./migracion_completa_planillas');
      await soloExtraerDatos(anioInicio2, anioFin2);
      break;
      
    case '3':
      const rutaArchivo = await obtenerEntrada('Ruta del archivo Excel de migraci√≥n: ');
      const crearSupervisores2 = (await obtenerEntrada('¬øCrear supervisores si no existen? (s/n): ')).toLowerCase() === 's';
      const crearSectores2 = (await obtenerEntrada('¬øCrear sectores si no existen? (s/n): ')).toLowerCase() === 's';
      
      console.log('');
      console.log('üîÑ Iniciando completado de referencias...');
      
      const { soloCompletarReferencias } = require('./migracion_completa_planillas');
      await soloCompletarReferencias(rutaArchivo, {
        crearSupervisores: crearSupervisores2,
        crearSectores: crearSectores2
      });
      break;
      
    case '4':
      return false;
      
    default:
      console.log('‚ùå Opci√≥n no v√°lida');
      return false;
  }
  
  return true;
}

// Funci√≥n principal interactiva
async function prepararMigracionCompleta() {
  console.log('üîß PREPARACI√ìN COMPLETA PARA MIGRACI√ìN DE PLANILLAS');
  console.log('==================================================');
  console.log('');
  console.log('Este script te guiar√° a trav√©s de todo el proceso:');
  console.log('1. Crear respaldo completo del sistema actual');
  console.log('2. Configurar conexi√≥n a la base de datos TRN');
  console.log('3. Verificar que todo est√© funcionando');
  console.log('4. Iniciar la migraci√≥n de planillas');
  console.log('');
  console.log('‚ö†Ô∏è  IMPORTANTE: Se recomienda hacer respaldo antes de continuar');
  console.log('');
  
  while (true) {
    mostrarMenuPreparacion();
    
    const opcion = await obtenerEntrada('Selecciona una opci√≥n (1-8): ');
    
    try {
      switch (opcion.trim()) {
        case '1':
          // Proceso completo
          console.log('');
          console.log('üîÑ INICIANDO PROCESO COMPLETO');
          console.log('=============================');
          console.log('');
          
          // Paso 1: Respaldo
          const respaldo = await ejecutarRespaldo();
          if (respaldo === null) {
            console.log('‚ùå Proceso cancelado por el usuario');
            break;
          }
          
          console.log('');
          console.log('='.repeat(50));
          console.log('');
          
          // Paso 2: Configuraci√≥n
          const configuracion = await ejecutarConfiguracion();
          if (!configuracion) {
            console.log('‚ùå Error en la configuraci√≥n, proceso detenido');
            break;
          }
          
          console.log('');
          console.log('='.repeat(50));
          console.log('');
          
          // Paso 3: Verificaci√≥n
          const verificacion = await ejecutarVerificacion();
          if (!verificacion) {
            console.log('‚ùå Problemas de conectividad, proceso detenido');
            break;
          }
          
          console.log('');
          console.log('='.repeat(50));
          console.log('');
          
          // Paso 4: Migraci√≥n
          const migracion = await iniciarMigracion();
          if (!migracion) {
            console.log('‚ùå Migraci√≥n cancelada');
            break;
          }
          
          console.log('');
          console.log('üéâ PROCESO COMPLETO FINALIZADO');
          console.log('=============================');
          break;
          
        case '2':
          // Solo respaldo
          await ejecutarRespaldo();
          break;
          
        case '3':
          // Solo configuraci√≥n
          await ejecutarConfiguracion();
          break;
          
        case '4':
          // Solo verificaci√≥n
          await ejecutarVerificacion();
          break;
          
        case '5':
          // Solo respaldo
          await ejecutarRespaldo();
          break;
          
        case '6':
          // Solo configuraci√≥n
          await ejecutarConfiguracion();
          break;
          
        case '7':
          // Solo verificaci√≥n
          await ejecutarVerificacion();
          break;
          
        case '8':
          console.log('üëã ¬°Hasta luego!');
          return;
          
        default:
          console.log('‚ùå Opci√≥n no v√°lida. Por favor selecciona 1-8.');
      }
      
      console.log('\n' + '='.repeat(50));
      const continuar = await obtenerEntrada('¬øDeseas realizar otra operaci√≥n? (s/n): ');
      if (continuar.toLowerCase() !== 's') {
        console.log('üëã ¬°Hasta luego!');
        break;
      }
      
    } catch (error) {
      console.error('‚ùå Error:', error.message);
      console.log('\n' + '='.repeat(50));
    }
  }
}

// Funci√≥n para ejecutar desde l√≠nea de comandos
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    // Modo interactivo
    await prepararMigracionCompleta();
    return;
  }
  
  // Modo l√≠nea de comandos
  const comando = args[0];
  
  switch (comando) {
    case 'completo':
      console.log('üîÑ Ejecutando proceso completo autom√°ticamente...');
      
      // Respaldo
      await ejecutarRespaldo();
      
      // Configuraci√≥n
      await ejecutarConfiguracion();
      
      // Verificaci√≥n
      await ejecutarVerificacion();
      
      // Migraci√≥n con par√°metros por defecto
      const { migracionCompleta } = require('./migracion_completa_planillas');
      await migracionCompleta(2024, 2025, {
        crearSupervisores: true,
        crearSectores: true
      });
      break;
      
    case 'respaldo':
      await ejecutarRespaldo();
      break;
      
    case 'configurar':
      await ejecutarConfiguracion();
      break;
      
    case 'verificar':
      await ejecutarVerificacion();
      break;
      
    default:
      console.log('‚ùå Uso: node preparar_migracion_completa.js [comando]');
      console.log('');
      console.log('Comandos disponibles:');
      console.log('  completo    - Ejecuta todo el proceso autom√°ticamente');
      console.log('  respaldo    - Solo crear respaldo');
      console.log('  configurar  - Solo configurar conexi√≥n');
      console.log('  verificar   - Solo verificar conexi√≥n');
      console.log('');
      console.log('Sin argumentos: modo interactivo');
      process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Error en la aplicaci√≥n:', error.message);
    process.exit(1);
  });
}

module.exports = {
  prepararMigracionCompleta,
  ejecutarRespaldo,
  ejecutarConfiguracion,
  ejecutarVerificacion,
  iniciarMigracion
}; 