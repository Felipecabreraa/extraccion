const { Usuario } = require('./src/models');
const bcrypt = require('bcryptjs');
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function crearUsuarioAdmin() {
  console.log('üîß CREANDO USUARIO ADMIN@ADMIN.COM\n');

  try {
    const adminExistente = await Usuario.findOne({
      where: { email: 'admin@admin.com' }
    });

    if (adminExistente) {
      console.log('‚úÖ Usuario admin@admin.com ya existe. Actualizando contrase√±a...');
      const hashedPassword = await bcrypt.hash('admin123', 10);
      await adminExistente.update({ password: hashedPassword });
      console.log('‚úÖ Contrase√±a actualizada a: admin123');
    } else {
      console.log('‚ùå Usuario admin@admin.com no existe. Creando...');
      const hashedPassword = await bcrypt.hash('admin123', 10);
      await Usuario.create({
        nombre: 'Administrador',
        email: 'admin@admin.com',
        password: hashedPassword,
        rol: 'administrador'
      });
      console.log('‚úÖ Usuario admin@admin.com creado exitosamente');
    }

    console.log('\nüìã CREDENCIALES:');
    console.log('   Email: admin@admin.com');
    console.log('   Contrase√±a: admin123');

  } catch (error) {
    console.error('‚ùå Error creando usuario:', error.message);
  }
}

async function verificarRutas() {
  console.log('\nüîç VERIFICANDO RUTAS\n');

  try {
    // Verificar servidor
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Servidor funcionando');

    // Verificar ruta de carga masiva
    try {
      const response = await axios.post(`${BASE_URL}/maquinas/carga-masiva`, {
        maquinas: []
      });
      console.log('‚úÖ Ruta /maquinas/carga-masiva funcionando');
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Ruta /maquinas/carga-masiva encontrada (necesita auth)');
      } else {
        console.log('‚ùå Error en ruta /maquinas/carga-masiva:', error.response?.status);
      }
    }

  } catch (error) {
    console.log('‚ùå Servidor no est√° ejecut√°ndose');
    return false;
  }
  
  return true;
}

async function probarFlujoCompleto() {
  console.log('\nüß™ PROBANDO FLUJO COMPLETO\n');

  try {
    // 1. Login
    console.log('1Ô∏è‚É£ Iniciando sesi√≥n...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@admin.com',
      password: 'admin123'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ Login exitoso');

    // 2. Probar carga masiva
    console.log('\n2Ô∏è‚É£ Probando carga masiva...');
    const cargaMasivaResponse = await axios.post(`${BASE_URL}/maquinas/carga-masiva`, {
      maquinas: [
        {
          numero: 'TEST001',
          marca: 'Test Brand',
          modelo: 'Test Model'
        }
      ]
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('‚úÖ Carga masiva exitosa');
    console.log('Status:', cargaMasivaResponse.status);
    console.log('Data:', JSON.stringify(cargaMasivaResponse.data, null, 2));

    console.log('\nüéâ ¬°TODO FUNCIONANDO CORRECTAMENTE!');
    console.log('   El frontend deber√≠a funcionar ahora');

  } catch (error) {
    console.log('‚ùå ERROR EN EL FLUJO:');
    console.log('Status:', error.response?.status);
    console.log('Data:', error.response?.data);
  }
}

async function solucionCompleta() {
  console.log('üöÄ SOLUCI√ìN COMPLETA PARA EL PROBLEMA DE CARGA MASIVA\n');

  // 1. Crear usuario admin
  await crearUsuarioAdmin();

  // 2. Verificar rutas
  const servidorOk = await verificarRutas();
  
  if (!servidorOk) {
    console.log('\n‚ùå El servidor no est√° ejecut√°ndose');
    console.log('   Ejecuta: npm start o node src/app.js');
    return;
  }

  // 3. Probar flujo completo
  await probarFlujoCompleto();

  console.log('\nüìù RESUMEN:');
  console.log('   1. ‚úÖ Usuario admin@admin.com creado/actualizado');
  console.log('   2. ‚úÖ Rutas verificadas');
  console.log('   3. ‚úÖ Flujo completo probado');
  console.log('\nüí° Si el frontend sigue fallando, reinicia el servidor backend');
}

solucionCompleta(); 