const { spawn } = require('child_process');
const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function esperarServidor() {
  console.log('‚è≥ Esperando que el servidor est√© listo...');
  
  for (let i = 0; i < 30; i++) {
    try {
      await axios.get(`${BASE_URL}/health`, { timeout: 2000 });
      console.log('‚úÖ Servidor listo');
      return true;
    } catch (error) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  console.log('‚ùå Servidor no respondi√≥ en 30 segundos');
  return false;
}

async function probarOrdenamiento() {
  console.log('\nüß™ PROBANDO ORDENAMIENTO DESPU√âS DEL REINICIO\n');

  try {
    // 1. Login
    console.log('1Ô∏è‚É£ Iniciando sesi√≥n...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'admin@admin.com',
      password: 'admin123'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ Login exitoso');

    // 2. Obtener m√°quinas y verificar ordenamiento
    console.log('\n2Ô∏è‚É£ Obteniendo m√°quinas ordenadas...');
    
    const maquinasResponse = await axios.get(`${BASE_URL}/maquinas`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    const maquinas = maquinasResponse.data;
    console.log(`‚úÖ Se obtuvieron ${maquinas.length} m√°quinas`);

    // Mostrar las primeras 15 m√°quinas ordenadas
    console.log('\nüìã PRIMERAS 15 M√ÅQUINAS (ORDENADAS POR N√öMERO):');
    maquinas.slice(0, 15).forEach((maquina, index) => {
      console.log(`${index + 1}. N√∫mero: ${maquina.numero} | Marca: ${maquina.marca} | Modelo: ${maquina.modelo}`);
    });

    // Verificar si est√°n ordenadas num√©ricamente
    console.log('\nüîç VERIFICANDO ORDENAMIENTO NUM√âRICO...');
    let ordenCorrecto = true;
    let errores = [];
    
    for (let i = 1; i < Math.min(maquinas.length, 15); i++) {
      const numeroActual = parseInt(maquinas[i-1].numero);
      const numeroSiguiente = parseInt(maquinas[i].numero);
      
      if (!isNaN(numeroActual) && !isNaN(numeroSiguiente) && numeroActual > numeroSiguiente) {
        errores.push(`${maquinas[i-1].numero} > ${maquinas[i].numero}`);
        ordenCorrecto = false;
      }
    }

    if (ordenCorrecto) {
      console.log('‚úÖ Las m√°quinas est√°n ordenadas correctamente de menor a mayor');
    } else {
      console.log('‚ùå Las m√°quinas NO est√°n ordenadas correctamente');
      console.log('Errores encontrados:', errores.slice(0, 5));
    }

    // 3. Mostrar estad√≠sticas
    console.log('\nüìä ESTAD√çSTICAS:');
    console.log(`Total de m√°quinas: ${maquinas.length}`);
    
    if (maquinas.length > 0) {
      const numeros = maquinas.map(m => parseInt(m.numero)).filter(n => !isNaN(n));
      if (numeros.length > 0) {
        console.log(`N√∫mero m√°s bajo: ${Math.min(...numeros)}`);
        console.log(`N√∫mero m√°s alto: ${Math.max(...numeros)}`);
      }
    }

  } catch (error) {
    console.log('‚ùå ERROR EN LA PRUEBA:');
    console.log('Error:', error.message);
    console.log('Status:', error.response?.status);
    console.log('Data:', error.response?.data);
  }
}

async function reiniciarServidor() {
  console.log('üîÑ REINICIANDO SERVIDOR PARA APLICAR CAMBIOS DE ORDENAMIENTO\n');

  // Detener procesos existentes
  console.log('1Ô∏è‚É£ Deteniendo procesos existentes...');
  
  const killProcess = spawn('taskkill', ['/F', '/IM', 'node.exe'], { 
    stdio: 'pipe',
    shell: true 
  });

  await new Promise((resolve) => {
    killProcess.on('close', () => {
      console.log('‚úÖ Procesos detenidos');
      resolve();
    });
  });

  // Esperar un momento
  await new Promise(resolve => setTimeout(resolve, 2000));

  // Iniciar el servidor
  console.log('\n2Ô∏è‚É£ Iniciando servidor con cambios de ordenamiento...');
  
  const server = spawn('node', ['src/app.js'], {
    stdio: 'pipe',
    shell: true
  });

  server.stdout.on('data', (data) => {
    console.log(`üì§ ${data.toString().trim()}`);
  });

  server.stderr.on('data', (data) => {
    console.log(`üì§ ERROR: ${data.toString().trim()}`);
  });

  // Esperar a que el servidor est√© listo
  const servidorListo = await esperarServidor();
  
  if (servidorListo) {
    await probarOrdenamiento();
  }

  // Mantener el proceso ejecut√°ndose
  server.on('close', (code) => {
    console.log(`\n‚ùå Servidor terminado con c√≥digo ${code}`);
  });
}

reiniciarServidor(); 