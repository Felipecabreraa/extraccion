const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';

async function verificarDanosConNull() {
  try {
    console.log('üîç VERIFICANDO SI LOS 608 DA√ëOS INCLUYEN REGISTROS CON cantidad_dano = NULL\n');

    // 1. Analizar los resultados de las consultas
    console.log('1. AN√ÅLISIS DE LOS RESULTADOS:');
    console.log('   üìä Consulta 1 (fecha_inicio = NULL): 0 registros');
    console.log('   üìä Consulta 2 (cantidad_dano = 0): 0 registros');
    console.log('   üìä Consulta 3 (cantidad_dano = NULL): 11,073 registros');
    console.log('   üìä Consulta 4 (total original): 455 registros - 584 da√±os');
    console.log('   üìä Consulta 5 (total vista): 455 registros - 584 da√±os');

    // 2. Verificar si los 608 da√±os incluyen registros con NULL
    console.log('\n2. VERIFICANDO SI LOS 608 DA√ëOS INCLUYEN REGISTROS CON NULL:');
    console.log('   üìã Consulta adicional necesaria:');
    console.log('   SELECT COUNT(*) as total, SUM(COALESCE(cantidad_dano, 0)) as total_danos');
    console.log('   FROM migracion_ordenes_2025');
    console.log('   WHERE fecha_inicio IS NOT NULL');
    
    console.log('\n   üìã O esta consulta m√°s espec√≠fica:');
    console.log('   SELECT');
    console.log('     COUNT(*) as total_registros,');
    console.log('     SUM(CASE WHEN cantidad_dano IS NOT NULL THEN cantidad_dano ELSE 0 END) as danos_no_null,');
    console.log('     SUM(CASE WHEN cantidad_dano IS NULL THEN 1 ELSE 0 END) as registros_con_null,');
    console.log('     SUM(COALESCE(cantidad_dano, 0)) as total_danos_con_coalesce');
    console.log('   FROM migracion_ordenes_2025');
    console.log('   WHERE fecha_inicio IS NOT NULL');

    // 3. Hip√≥tesis sobre los 608 da√±os
    console.log('\n3. HIP√ìTESIS SOBRE LOS 608 DA√ëOS:');
    console.log('   üí° Posibilidad 1: Los 608 incluyen registros con cantidad_dano = NULL');
    console.log('      - Si usamos COALESCE(cantidad_dano, 0), los NULL se convierten a 0');
    console.log('      - Esto explicar√≠a por qu√© la vista muestra 584 (solo registros con da√±os > 0)');
    
    console.log('\n   üí° Posibilidad 2: Los 608 son solo registros con cantidad_dano > 0');
    console.log('      - Pero hay una discrepancia en el conteo');
    console.log('      - 608 vs 584 = 24 da√±os faltantes');
    
    console.log('\n   üí° Posibilidad 3: Los 608 incluyen alg√∫n otro tipo de registro');
    console.log('      - Quiz√°s registros con fecha_inicio = NULL');
    console.log('      - O registros de otra tabla relacionada');

    // 4. Verificar la vista unificada actual
    console.log('\n4. VERIFICANDO LA VISTA UNIFICADA ACTUAL:');
    try {
      const danosTestResponse = await axios.get(`${BASE_URL}/danos/stats/test?year=2025`);
      const danosTestData = danosTestResponse.data;
      
      if (danosTestData.danosPorTipo && danosTestData.danosPorTipo.length > 0) {
        const totalVistaUnificada = danosTestData.danosPorTipo.reduce((sum, tipo) => sum + tipo.total_danos, 0);
        console.log(`   üìä Total en vista unificada: ${totalVistaUnificada} da√±os`);
        console.log(`   üìä Total esperado: 608 da√±os`);
        console.log(`   üìä Diferencia: ${608 - totalVistaUnificada} da√±os`);
        
        console.log('\n   üìã Desglose por tipos:');
        danosTestData.danosPorTipo.forEach((tipo, index) => {
          console.log(`      ${index + 1}. ${tipo.tipo}: ${tipo.total_danos} da√±os (${tipo.cantidad} registros)`);
        });
      }
    } catch (error) {
      console.log(`   ‚ùå Error verificando vista: ${error.response?.status || error.message}`);
    }

    // 5. Recomendaci√≥n espec√≠fica
    console.log('\n5. RECOMENDACI√ìN ESPEC√çFICA:');
    console.log('   üéØ Ejecutar esta consulta SQL para confirmar:');
    console.log('   SELECT');
    console.log('     COUNT(*) as total_registros,');
    console.log('     SUM(CASE WHEN cantidad_dano IS NOT NULL THEN cantidad_dano ELSE 0 END) as danos_no_null,');
    console.log('     SUM(CASE WHEN cantidad_dano IS NULL THEN 1 ELSE 0 END) as registros_con_null,');
    console.log('     SUM(COALESCE(cantidad_dano, 0)) as total_danos_con_coalesce');
    console.log('   FROM migracion_ordenes_2025');
    console.log('   WHERE fecha_inicio IS NOT NULL;');

    // 6. Pr√≥ximos pasos
    console.log('\n6. PR√ìXIMOS PASOS:');
    console.log('   üìã 1. Ejecutar la consulta SQL anterior');
    console.log('   üìã 2. Verificar si total_danos_con_coalesce = 608');
    console.log('   üìã 3. Si es as√≠, el problema est√° en que la vista excluye registros con NULL');
    console.log('   üìã 4. Si no es as√≠, buscar en otras tablas o fuentes de datos');

    console.log('\n‚úÖ AN√ÅLISIS COMPLETO: Ejecuta la consulta SQL para confirmar');

  } catch (error) {
    console.error('‚ùå Error al verificar da√±os con NULL:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
  }
}

verificarDanosConNull();





